# Workflow name
name: Build Docker image

# Events that call the workflow
on:
  workflow_call:
    inputs:
      typeDeploy:
        description: 'The type of deploy passed from the caller workflow'
        default: ''
        required: true
        type: string
      appName:
        description: 'The application name passed from the caller workflow'
        default: ''
        required: true
        type: string
      setRegion:
        description: 'The region passed from the caller workflow'
        default: 'us-east-1'
        required: true
        type: string
      setEnvironment:
        description: 'The env passed from the caller workflow'
        default: 'dev'
        required: true
        type: string
    secrets:
      access-token:
        description: 'A token passed from the caller workflow'
        required: true
  workflow_dispatch:

env:
  AWS_REGION: ${{ inputs.setRegion }}                                                      # set this to your preferred AWS region, e.g. us-west-1
  ENV: ${{ inputs.setEnvironment }} 
  APP_NAME: ${{ inputs.appName }}
  ENVIRONMENT_NAME: ${{ inputs.appName }}-${{ inputs.setEnvironment }}
  VERSION_LABEL: ${{ inputs.appName }}-${{ inputs.setEnvironment }}-${{ github.sha }}-${{github.run_number}}
  ECS_SERVICE:
  ECS_CLUSTER:
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Deploy to Amazon ECS job
  build Docker image:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}-${{github.run_number}}
        run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        cd ./app
        docker build -t $ECR_REPOSITORY:latest --build-arg config_env=${{ github.event.inputs.setEnvironment }} .
        docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"